// Code generated by protoc-gen-go.
// source: campaign.proto
// DO NOT EDIT!

/*
Package typedef is a generated protocol buffer package.

It is generated from these files:
	campaign.proto

It has these top-level messages:
	Campaign
	CampBasic
	Creative
	Budget
	Target
	BannerCreative
	PopupCreative
	NativeCreative
	Native
	CreativeSnippet
*/
package typedef

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AdType int32

const (
	AdType_eAdTypeUnknown AdType = 0
	AdType_eBanner        AdType = 1
	AdType_ePopup         AdType = 2
	AdType_eNative        AdType = 3
)

var AdType_name = map[int32]string{
	0: "eAdTypeUnknown",
	1: "eBanner",
	2: "ePopup",
	3: "eNative",
}
var AdType_value = map[string]int32{
	"eAdTypeUnknown": 0,
	"eBanner":        1,
	"ePopup":         2,
	"eNative":        3,
}

func (x AdType) String() string {
	return proto.EnumName(AdType_name, int32(x))
}
func (AdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ImageMime int32

const (
	ImageMime_eImgUnknown ImageMime = 0
	ImageMime_eJPG        ImageMime = 1
	ImageMime_ePNG        ImageMime = 2
	ImageMime_eGIF        ImageMime = 3
)

var ImageMime_name = map[int32]string{
	0: "eImgUnknown",
	1: "eJPG",
	2: "ePNG",
	3: "eGIF",
}
var ImageMime_value = map[string]int32{
	"eImgUnknown": 0,
	"eJPG":        1,
	"ePNG":        2,
	"eGIF":        3,
}

func (x ImageMime) String() string {
	return proto.EnumName(ImageMime_name, int32(x))
}
func (ImageMime) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type OSType int32

const (
	OSType_eOSUnknown OSType = 0
	OSType_eIOS       OSType = 1
	OSType_eANDROID   OSType = 2
	OSType_eWPH       OSType = 3
	OSType_eWCE       OSType = 4
	OSType_eRIM       OSType = 5
	OSType_eLSPH      OSType = 6
	OSType_eMAC       OSType = 7
	OSType_eLINUX     OSType = 8
	OSType_eJVM       OSType = 9
	OSType_eRIMTABLET OSType = 10
	OSType_eTIZEN     OSType = 11
	OSType_eWIN       OSType = 12
	OSType_eOSX       OSType = 13
	OSType_eBBERRY    OSType = 14
	OSType_eSYMBIAN   OSType = 15
)

var OSType_name = map[int32]string{
	0:  "eOSUnknown",
	1:  "eIOS",
	2:  "eANDROID",
	3:  "eWPH",
	4:  "eWCE",
	5:  "eRIM",
	6:  "eLSPH",
	7:  "eMAC",
	8:  "eLINUX",
	9:  "eJVM",
	10: "eRIMTABLET",
	11: "eTIZEN",
	12: "eWIN",
	13: "eOSX",
	14: "eBBERRY",
	15: "eSYMBIAN",
}
var OSType_value = map[string]int32{
	"eOSUnknown": 0,
	"eIOS":       1,
	"eANDROID":   2,
	"eWPH":       3,
	"eWCE":       4,
	"eRIM":       5,
	"eLSPH":      6,
	"eMAC":       7,
	"eLINUX":     8,
	"eJVM":       9,
	"eRIMTABLET": 10,
	"eTIZEN":     11,
	"eWIN":       12,
	"eOSX":       13,
	"eBBERRY":    14,
	"eSYMBIAN":   15,
}

func (x OSType) String() string {
	return proto.EnumName(OSType_name, int32(x))
}
func (OSType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PayoutMode int32

const (
	PayoutMode_ePayoutUnknown PayoutMode = 0
	PayoutMode_eCpaFixed      PayoutMode = 1
	PayoutMode_eCpaDynamic    PayoutMode = 2
)

var PayoutMode_name = map[int32]string{
	0: "ePayoutUnknown",
	1: "eCpaFixed",
	2: "eCpaDynamic",
}
var PayoutMode_value = map[string]int32{
	"ePayoutUnknown": 0,
	"eCpaFixed":      1,
	"eCpaDynamic":    2,
}

func (x PayoutMode) String() string {
	return proto.EnumName(PayoutMode_name, int32(x))
}
func (PayoutMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type InventoryType int32

const (
	InventoryType_eInventoryUnkown InventoryType = 0
	InventoryType_eInventoryWhite  InventoryType = 1
	InventoryType_eInventoryBlack  InventoryType = 2
)

var InventoryType_name = map[int32]string{
	0: "eInventoryUnkown",
	1: "eInventoryWhite",
	2: "eInventoryBlack",
}
var InventoryType_value = map[string]int32{
	"eInventoryUnkown": 0,
	"eInventoryWhite":  1,
	"eInventoryBlack":  2,
}

func (x InventoryType) String() string {
	return proto.EnumName(InventoryType_name, int32(x))
}
func (InventoryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AudienceType int32

const (
	AudienceType_eAudienceNone  AudienceType = 0
	AudienceType_eAudienceWhite AudienceType = 1
	AudienceType_eAudienceBlack AudienceType = 2
)

var AudienceType_name = map[int32]string{
	0: "eAudienceNone",
	1: "eAudienceWhite",
	2: "eAudienceBlack",
}
var AudienceType_value = map[string]int32{
	"eAudienceNone":  0,
	"eAudienceWhite": 1,
	"eAudienceBlack": 2,
}

func (x AudienceType) String() string {
	return proto.EnumName(AudienceType_name, int32(x))
}
func (AudienceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DevType int32

const (
	DevType_eDevUnkown  DevType = 0
	DevType_eDevTablet  DevType = 1
	DevType_eDevMobile  DevType = 2
	DevType_eDevDesktop DevType = 3
)

var DevType_name = map[int32]string{
	0: "eDevUnkown",
	1: "eDevTablet",
	2: "eDevMobile",
	3: "eDevDesktop",
}
var DevType_value = map[string]int32{
	"eDevUnkown":  0,
	"eDevTablet":  1,
	"eDevMobile":  2,
	"eDevDesktop": 3,
}

func (x DevType) String() string {
	return proto.EnumName(DevType_name, int32(x))
}
func (DevType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ConnType int32

const (
	ConnType_eConnUnkown ConnType = 0
	ConnType_eConnAll    ConnType = 1
	ConnType_eConnMobile ConnType = 2
	ConnType_eConnWifi   ConnType = 3
)

var ConnType_name = map[int32]string{
	0: "eConnUnkown",
	1: "eConnAll",
	2: "eConnMobile",
	3: "eConnWifi",
}
var ConnType_value = map[string]int32{
	"eConnUnkown": 0,
	"eConnAll":    1,
	"eConnMobile": 2,
	"eConnWifi":   3,
}

func (x ConnType) String() string {
	return proto.EnumName(ConnType_name, int32(x))
}
func (ConnType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type SourceType int32

const (
	SourceType_eSourceUnknonwn SourceType = 0
	SourceType_eSourceInApp    SourceType = 1
	SourceType_eSourceWeb      SourceType = 2
	SourceType_eSourceAll      SourceType = 3
)

var SourceType_name = map[int32]string{
	0: "eSourceUnknonwn",
	1: "eSourceInApp",
	2: "eSourceWeb",
	3: "eSourceAll",
}
var SourceType_value = map[string]int32{
	"eSourceUnknonwn": 0,
	"eSourceInApp":    1,
	"eSourceWeb":      2,
	"eSourceAll":      3,
}

func (x SourceType) String() string {
	return proto.EnumName(SourceType_name, int32(x))
}
func (SourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SpendModel int32

const (
	SpendModel_eSpendUnknown SpendModel = 0
	SpendModel_eAsap         SpendModel = 1
	SpendModel_eSmooth       SpendModel = 2
)

var SpendModel_name = map[int32]string{
	0: "eSpendUnknown",
	1: "eAsap",
	2: "eSmooth",
}
var SpendModel_value = map[string]int32{
	"eSpendUnknown": 0,
	"eAsap":         1,
	"eSmooth":       2,
}

func (x SpendModel) String() string {
	return proto.EnumName(SpendModel_name, int32(x))
}
func (SpendModel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type FreqCappingInterval int32

const (
	FreqCappingInterval_eFreqCappingUnknown FreqCappingInterval = 0
	FreqCappingInterval_e3Hour              FreqCappingInterval = 1
	FreqCappingInterval_e6Hour              FreqCappingInterval = 2
	FreqCappingInterval_e12Hour             FreqCappingInterval = 3
	FreqCappingInterval_e24Hour             FreqCappingInterval = 4
)

var FreqCappingInterval_name = map[int32]string{
	0: "eFreqCappingUnknown",
	1: "e3Hour",
	2: "e6Hour",
	3: "e12Hour",
	4: "e24Hour",
}
var FreqCappingInterval_value = map[string]int32{
	"eFreqCappingUnknown": 0,
	"e3Hour":              1,
	"e6Hour":              2,
	"e12Hour":             3,
	"e24Hour":             4,
}

func (x FreqCappingInterval) String() string {
	return proto.EnumName(FreqCappingInterval_name, int32(x))
}
func (FreqCappingInterval) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type Native_NativeImageType int32

const (
	Native_eNativeImageUnkown Native_NativeImageType = 0
	Native_eNativeImageIcon   Native_NativeImageType = 1
	Native_eNativeImageLogo   Native_NativeImageType = 2
	Native_eNativeImageMain   Native_NativeImageType = 3
)

var Native_NativeImageType_name = map[int32]string{
	0: "eNativeImageUnkown",
	1: "eNativeImageIcon",
	2: "eNativeImageLogo",
	3: "eNativeImageMain",
}
var Native_NativeImageType_value = map[string]int32{
	"eNativeImageUnkown": 0,
	"eNativeImageIcon":   1,
	"eNativeImageLogo":   2,
	"eNativeImageMain":   3,
}

func (x Native_NativeImageType) String() string {
	return proto.EnumName(Native_NativeImageType_name, int32(x))
}
func (Native_NativeImageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type Campaign struct {
	Id        uint64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Adtype    AdType      `protobuf:"varint,2,opt,name=adtype,enum=typedef.AdType" json:"adtype,omitempty"`
	Basic     *CampBasic  `protobuf:"bytes,3,opt,name=basic" json:"basic,omitempty"`
	Budget    *Budget     `protobuf:"bytes,4,opt,name=budget" json:"budget,omitempty"`
	Target    *Target     `protobuf:"bytes,5,opt,name=target" json:"target,omitempty"`
	Creatives []*Creative `protobuf:"bytes,6,rep,name=creatives" json:"creatives,omitempty"`
}

func (m *Campaign) Reset()                    { *m = Campaign{} }
func (m *Campaign) String() string            { return proto.CompactTextString(m) }
func (*Campaign) ProtoMessage()               {}
func (*Campaign) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Campaign) GetBasic() *CampBasic {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *Campaign) GetBudget() *Budget {
	if m != nil {
		return m.Budget
	}
	return nil
}

func (m *Campaign) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Campaign) GetCreatives() []*Creative {
	if m != nil {
		return m.Creatives
	}
	return nil
}

type CampBasic struct {
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IsActive bool   `protobuf:"varint,4,opt,name=isActive" json:"isActive,omitempty"`
	// tracking impression url
	Trkimpurl string `protobuf:"bytes,5,opt,name=trkimpurl" json:"trkimpurl,omitempty"`
	// tracking campaign url attach mdsp campaign
	Trkcampurl string `protobuf:"bytes,6,opt,name=trkcampurl" json:"trkcampurl,omitempty"`
	// advertiser domain
	Advtdomain string `protobuf:"bytes,7,opt,name=advtdomain" json:"advtdomain,omitempty"`
	// payout 10e6 in uint
	Payout uint64 `protobuf:"varint,8,opt,name=payout" json:"payout,omitempty"`
	// payout type
	PayoutMode PayoutMode `protobuf:"varint,9,opt,name=payoutMode,enum=typedef.PayoutMode" json:"payoutMode,omitempty"`
	// conversion action in url
	Convurl string `protobuf:"bytes,10,opt,name=convurl" json:"convurl,omitempty"`
	// max bid price 10e6 in unit
	MaxBidPrice uint64 `protobuf:"varint,11,opt,name=maxBidPrice" json:"maxBidPrice,omitempty"`
	// user id of campaign
	Userid uint64 `protobuf:"varint,12,opt,name=userid" json:"userid,omitempty"`
	// tracking campaign click url
	Trkclickurl string `protobuf:"bytes,13,opt,name=trkclickurl" json:"trkclickurl,omitempty"`
}

func (m *CampBasic) Reset()                    { *m = CampBasic{} }
func (m *CampBasic) String() string            { return proto.CompactTextString(m) }
func (*CampBasic) ProtoMessage()               {}
func (*CampBasic) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Creative struct {
	// Types that are valid to be assigned to Crv:
	//	*Creative_BannerCrv
	//	*Creative_PopupCrv
	//	*Creative_NativeCrv
	Crv isCreative_Crv `protobuf_oneof:"crv"`
}

func (m *Creative) Reset()                    { *m = Creative{} }
func (m *Creative) String() string            { return proto.CompactTextString(m) }
func (*Creative) ProtoMessage()               {}
func (*Creative) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isCreative_Crv interface {
	isCreative_Crv()
}

type Creative_BannerCrv struct {
	BannerCrv *BannerCreative `protobuf:"bytes,1,opt,name=bannerCrv,oneof"`
}
type Creative_PopupCrv struct {
	PopupCrv *PopupCreative `protobuf:"bytes,2,opt,name=popupCrv,oneof"`
}
type Creative_NativeCrv struct {
	NativeCrv *NativeCreative `protobuf:"bytes,3,opt,name=nativeCrv,oneof"`
}

func (*Creative_BannerCrv) isCreative_Crv() {}
func (*Creative_PopupCrv) isCreative_Crv()  {}
func (*Creative_NativeCrv) isCreative_Crv() {}

func (m *Creative) GetCrv() isCreative_Crv {
	if m != nil {
		return m.Crv
	}
	return nil
}

func (m *Creative) GetBannerCrv() *BannerCreative {
	if x, ok := m.GetCrv().(*Creative_BannerCrv); ok {
		return x.BannerCrv
	}
	return nil
}

func (m *Creative) GetPopupCrv() *PopupCreative {
	if x, ok := m.GetCrv().(*Creative_PopupCrv); ok {
		return x.PopupCrv
	}
	return nil
}

func (m *Creative) GetNativeCrv() *NativeCreative {
	if x, ok := m.GetCrv().(*Creative_NativeCrv); ok {
		return x.NativeCrv
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Creative) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Creative_OneofMarshaler, _Creative_OneofUnmarshaler, _Creative_OneofSizer, []interface{}{
		(*Creative_BannerCrv)(nil),
		(*Creative_PopupCrv)(nil),
		(*Creative_NativeCrv)(nil),
	}
}

func _Creative_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Creative)
	// crv
	switch x := m.Crv.(type) {
	case *Creative_BannerCrv:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BannerCrv); err != nil {
			return err
		}
	case *Creative_PopupCrv:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PopupCrv); err != nil {
			return err
		}
	case *Creative_NativeCrv:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NativeCrv); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Creative.Crv has unexpected type %T", x)
	}
	return nil
}

func _Creative_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Creative)
	switch tag {
	case 1: // crv.bannerCrv
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BannerCreative)
		err := b.DecodeMessage(msg)
		m.Crv = &Creative_BannerCrv{msg}
		return true, err
	case 2: // crv.popupCrv
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PopupCreative)
		err := b.DecodeMessage(msg)
		m.Crv = &Creative_PopupCrv{msg}
		return true, err
	case 3: // crv.nativeCrv
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NativeCreative)
		err := b.DecodeMessage(msg)
		m.Crv = &Creative_NativeCrv{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Creative_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Creative)
	// crv
	switch x := m.Crv.(type) {
	case *Creative_BannerCrv:
		s := proto.Size(x.BannerCrv)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Creative_PopupCrv:
		s := proto.Size(x.PopupCrv)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Creative_NativeCrv:
		s := proto.Size(x.NativeCrv)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Budget struct {
	UnlimitedEnable bool `protobuf:"varint,1,opt,name=unlimitedEnable" json:"unlimitedEnable,omitempty"`
	// budget in unit 10e6
	TotalBudget     uint64 `protobuf:"varint,2,opt,name=totalBudget" json:"totalBudget,omitempty"`
	DailyBudget     uint64 `protobuf:"varint,3,opt,name=dailyBudget" json:"dailyBudget,omitempty"`
	PlacementBudget uint64 `protobuf:"varint,4,opt,name=placementBudget" json:"placementBudget,omitempty"`
	// utc datetime
	StartStamp uint64 `protobuf:"varint,5,opt,name=startStamp" json:"startStamp,omitempty"`
	EndStamp   uint64 `protobuf:"varint,6,opt,name=endStamp" json:"endStamp,omitempty"`
	// frequency control
	FreqCappingEnable   bool                `protobuf:"varint,7,opt,name=freqCappingEnable" json:"freqCappingEnable,omitempty"`
	FreqCapping         uint64              `protobuf:"varint,8,opt,name=freqCapping" json:"freqCapping,omitempty"`
	FreqCappingInterval FreqCappingInterval `protobuf:"varint,9,opt,name=freqCappingInterval,enum=typedef.FreqCappingInterval" json:"freqCappingInterval,omitempty"`
	SpendModel          SpendModel          `protobuf:"varint,10,opt,name=spendModel,enum=typedef.SpendModel" json:"spendModel,omitempty"`
	// int64 array, 7 element total, each one representes 24 hours in 24 bit from low to high address
	DayParting []uint64 `protobuf:"varint,11,rep,packed,name=dayParting" json:"dayParting,omitempty"`
	Timezone   string   `protobuf:"bytes,12,opt,name=timezone" json:"timezone,omitempty"`
}

func (m *Budget) Reset()                    { *m = Budget{} }
func (m *Budget) String() string            { return proto.CompactTextString(m) }
func (*Budget) ProtoMessage()               {}
func (*Budget) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Target struct {
	Adxs []uint64 `protobuf:"varint,1,rep,packed,name=adxs" json:"adxs,omitempty"`
	// 2 level category
	Categories []string `protobuf:"bytes,2,rep,name=categories" json:"categories,omitempty"`
	// geo
	Country []string `protobuf:"bytes,3,rep,name=country" json:"country,omitempty"`
	Region  []string `protobuf:"bytes,4,rep,name=region" json:"region,omitempty"`
	City    []string `protobuf:"bytes,5,rep,name=city" json:"city,omitempty"`
	// device type
	Devtype []DevType `protobuf:"varint,6,rep,packed,name=devtype,enum=typedef.DevType" json:"devtype,omitempty"`
	// connection type
	Conntype ConnType `protobuf:"varint,7,opt,name=conntype,enum=typedef.ConnType" json:"conntype,omitempty"`
	Carrier  []string `protobuf:"bytes,8,rep,name=carrier" json:"carrier,omitempty"`
	// repeated string os   = ;
	Osv []string `protobuf:"bytes,9,rep,name=osv" json:"osv,omitempty"`
	//
	Ips []string `protobuf:"bytes,10,rep,name=ips" json:"ips,omitempty"`
	// retargetting audiences
	Autype              AudienceType `protobuf:"varint,11,opt,name=autype,enum=typedef.AudienceType" json:"autype,omitempty"`
	RetargetingAuListId []string     `protobuf:"bytes,12,rep,name=retargetingAuListId" json:"retargetingAuListId,omitempty"`
	// retargetting record
	IsRetargettingEnable bool   `protobuf:"varint,13,opt,name=isRetargettingEnable" json:"isRetargettingEnable,omitempty"`
	ViewerListName       string `protobuf:"bytes,14,opt,name=viewerListName" json:"viewerListName,omitempty"`
	VisitorListName      string `protobuf:"bytes,15,opt,name=visitorListName" json:"visitorListName,omitempty"`
	ConverterListName    string `protobuf:"bytes,16,opt,name=converterListName" json:"converterListName,omitempty"`
	// inventory control type and whitelist or blacklist name inlcude
	// bundle id, site url
	InvenType InventoryType `protobuf:"varint,17,opt,name=invenType,enum=typedef.InventoryType" json:"invenType,omitempty"`
	InvenName []string      `protobuf:"bytes,18,rep,name=invenName" json:"invenName,omitempty"`
	// check idfa/gaid or not
	IsIdfaGaidValid bool `protobuf:"varint,19,opt,name=isIdfaGaidValid" json:"isIdfaGaidValid,omitempty"`
	// source type
	Srctype SourceType `protobuf:"varint,20,opt,name=srctype,enum=typedef.SourceType" json:"srctype,omitempty"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type BannerCreative struct {
	Id         uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CamId      uint64           `protobuf:"varint,2,opt,name=camId" json:"camId,omitempty"`
	IsActive   bool             `protobuf:"varint,3,opt,name=isActive" json:"isActive,omitempty"`
	Mime       ImageMime        `protobuf:"varint,4,opt,name=mime,enum=typedef.ImageMime" json:"mime,omitempty"`
	Imgurl     string           `protobuf:"bytes,5,opt,name=imgurl" json:"imgurl,omitempty"`
	Width      uint32           `protobuf:"varint,8,opt,name=width" json:"width,omitempty"`
	Height     uint32           `protobuf:"varint,9,opt,name=height" json:"height,omitempty"`
	Snippet    *CreativeSnippet `protobuf:"bytes,10,opt,name=snippet" json:"snippet,omitempty"`
	IsApproved bool             `protobuf:"varint,11,opt,name=IsApproved,json=isApproved" json:"IsApproved,omitempty"`
}

func (m *BannerCreative) Reset()                    { *m = BannerCreative{} }
func (m *BannerCreative) String() string            { return proto.CompactTextString(m) }
func (*BannerCreative) ProtoMessage()               {}
func (*BannerCreative) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BannerCreative) GetSnippet() *CreativeSnippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

type PopupCreative struct {
	Id         uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CamId      uint64           `protobuf:"varint,2,opt,name=camId" json:"camId,omitempty"`
	IsActive   bool             `protobuf:"varint,3,opt,name=isActive" json:"isActive,omitempty"`
	Html       string           `protobuf:"bytes,4,opt,name=html" json:"html,omitempty"`
	Snippet    *CreativeSnippet `protobuf:"bytes,11,opt,name=snippet" json:"snippet,omitempty"`
	IsApproved bool             `protobuf:"varint,12,opt,name=IsApproved,json=isApproved" json:"IsApproved,omitempty"`
}

func (m *PopupCreative) Reset()                    { *m = PopupCreative{} }
func (m *PopupCreative) String() string            { return proto.CompactTextString(m) }
func (*PopupCreative) ProtoMessage()               {}
func (*PopupCreative) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PopupCreative) GetSnippet() *CreativeSnippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

type NativeCreative struct {
	Id         uint64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CamId      uint64           `protobuf:"varint,2,opt,name=camId" json:"camId,omitempty"`
	IsActive   bool             `protobuf:"varint,3,opt,name=isActive" json:"isActive,omitempty"`
	Native     *Native          `protobuf:"bytes,4,opt,name=native" json:"native,omitempty"`
	Snippet    *CreativeSnippet `protobuf:"bytes,11,opt,name=snippet" json:"snippet,omitempty"`
	IsApproved bool             `protobuf:"varint,12,opt,name=IsApproved,json=isApproved" json:"IsApproved,omitempty"`
}

func (m *NativeCreative) Reset()                    { *m = NativeCreative{} }
func (m *NativeCreative) String() string            { return proto.CompactTextString(m) }
func (*NativeCreative) ProtoMessage()               {}
func (*NativeCreative) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NativeCreative) GetNative() *Native {
	if m != nil {
		return m.Native
	}
	return nil
}

func (m *NativeCreative) GetSnippet() *CreativeSnippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

type Native struct {
	Asset *Native_Asset `protobuf:"bytes,1,opt,name=asset" json:"asset,omitempty"`
	Link  *Native_Link  `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
}

func (m *Native) Reset()                    { *m = Native{} }
func (m *Native) String() string            { return proto.CompactTextString(m) }
func (*Native) ProtoMessage()               {}
func (*Native) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Native) GetAsset() *Native_Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *Native) GetLink() *Native_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

type Native_Asset struct {
	Title []*Native_Title `protobuf:"bytes,1,rep,name=title" json:"title,omitempty"`
	Data  []*Native_Data  `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	Image []*Native_Image `protobuf:"bytes,3,rep,name=image" json:"image,omitempty"`
	Video []*Native_Video `protobuf:"bytes,4,rep,name=video" json:"video,omitempty"`
}

func (m *Native_Asset) Reset()                    { *m = Native_Asset{} }
func (m *Native_Asset) String() string            { return proto.CompactTextString(m) }
func (*Native_Asset) ProtoMessage()               {}
func (*Native_Asset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *Native_Asset) GetTitle() []*Native_Title {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *Native_Asset) GetData() []*Native_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Native_Asset) GetImage() []*Native_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Native_Asset) GetVideo() []*Native_Video {
	if m != nil {
		return m.Video
	}
	return nil
}

type Native_Title struct {
	Len  uint64 `protobuf:"varint,1,opt,name=len" json:"len,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
}

func (m *Native_Title) Reset()                    { *m = Native_Title{} }
func (m *Native_Title) String() string            { return proto.CompactTextString(m) }
func (*Native_Title) ProtoMessage()               {}
func (*Native_Title) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 1} }

type Native_Image struct {
	W    int32                  `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	H    int32                  `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	Mime ImageMime              `protobuf:"varint,3,opt,name=mime,enum=typedef.ImageMime" json:"mime,omitempty"`
	Url  string                 `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	Type Native_NativeImageType `protobuf:"varint,5,opt,name=type,enum=typedef.Native_NativeImageType" json:"type,omitempty"`
}

func (m *Native_Image) Reset()                    { *m = Native_Image{} }
func (m *Native_Image) String() string            { return proto.CompactTextString(m) }
func (*Native_Image) ProtoMessage()               {}
func (*Native_Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 2} }

type Native_Data struct {
	Type  int64  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Len   uint64 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *Native_Data) Reset()                    { *m = Native_Data{} }
func (m *Native_Data) String() string            { return proto.CompactTextString(m) }
func (*Native_Data) ProtoMessage()               {}
func (*Native_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 3} }

type Native_Video struct {
	W        int32  `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	H        int32  `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	Duration int32  `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	Mime     string `protobuf:"bytes,4,opt,name=mime" json:"mime,omitempty"`
	Url      string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	CoverUrl string `protobuf:"bytes,6,opt,name=coverUrl" json:"coverUrl,omitempty"`
}

func (m *Native_Video) Reset()                    { *m = Native_Video{} }
func (m *Native_Video) String() string            { return proto.CompactTextString(m) }
func (*Native_Video) ProtoMessage()               {}
func (*Native_Video) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 4} }

type Native_Link struct {
	// landing URL of the clickable link
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// fallback URL for deeplink
	Fallback string `protobuf:"bytes,2,opt,name=fallback" json:"fallback,omitempty"`
	// list of third-party tracker urls to be fire on click of the URL
	Clicktrackers []string `protobuf:"bytes,3,rep,name=clicktrackers" json:"clicktrackers,omitempty"`
}

func (m *Native_Link) Reset()                    { *m = Native_Link{} }
func (m *Native_Link) String() string            { return proto.CompactTextString(m) }
func (*Native_Link) ProtoMessage()               {}
func (*Native_Link) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 5} }

type CreativeSnippet struct {
	Adm     string   `protobuf:"bytes,1,opt,name=adm" json:"adm,omitempty"`
	Adomain []string `protobuf:"bytes,2,rep,name=adomain" json:"adomain,omitempty"`
	Nurl    string   `protobuf:"bytes,3,opt,name=nurl" json:"nurl,omitempty"`
	Iurl    string   `protobuf:"bytes,4,opt,name=iurl" json:"iurl,omitempty"`
	FlowId  uint64   `protobuf:"varint,6,opt,name=flowId" json:"flowId,omitempty"`
	Desturl string   `protobuf:"bytes,7,opt,name=desturl" json:"desturl,omitempty"`
	Campurl string   `protobuf:"bytes,8,opt,name=campurl" json:"campurl,omitempty"`
}

func (m *CreativeSnippet) Reset()                    { *m = CreativeSnippet{} }
func (m *CreativeSnippet) String() string            { return proto.CompactTextString(m) }
func (*CreativeSnippet) ProtoMessage()               {}
func (*CreativeSnippet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*Campaign)(nil), "typedef.Campaign")
	proto.RegisterType((*CampBasic)(nil), "typedef.CampBasic")
	proto.RegisterType((*Creative)(nil), "typedef.Creative")
	proto.RegisterType((*Budget)(nil), "typedef.Budget")
	proto.RegisterType((*Target)(nil), "typedef.Target")
	proto.RegisterType((*BannerCreative)(nil), "typedef.BannerCreative")
	proto.RegisterType((*PopupCreative)(nil), "typedef.PopupCreative")
	proto.RegisterType((*NativeCreative)(nil), "typedef.NativeCreative")
	proto.RegisterType((*Native)(nil), "typedef.Native")
	proto.RegisterType((*Native_Asset)(nil), "typedef.Native.Asset")
	proto.RegisterType((*Native_Title)(nil), "typedef.Native.Title")
	proto.RegisterType((*Native_Image)(nil), "typedef.Native.Image")
	proto.RegisterType((*Native_Data)(nil), "typedef.Native.Data")
	proto.RegisterType((*Native_Video)(nil), "typedef.Native.Video")
	proto.RegisterType((*Native_Link)(nil), "typedef.Native.Link")
	proto.RegisterType((*CreativeSnippet)(nil), "typedef.CreativeSnippet")
	proto.RegisterEnum("typedef.AdType", AdType_name, AdType_value)
	proto.RegisterEnum("typedef.ImageMime", ImageMime_name, ImageMime_value)
	proto.RegisterEnum("typedef.OSType", OSType_name, OSType_value)
	proto.RegisterEnum("typedef.PayoutMode", PayoutMode_name, PayoutMode_value)
	proto.RegisterEnum("typedef.InventoryType", InventoryType_name, InventoryType_value)
	proto.RegisterEnum("typedef.AudienceType", AudienceType_name, AudienceType_value)
	proto.RegisterEnum("typedef.DevType", DevType_name, DevType_value)
	proto.RegisterEnum("typedef.ConnType", ConnType_name, ConnType_value)
	proto.RegisterEnum("typedef.SourceType", SourceType_name, SourceType_value)
	proto.RegisterEnum("typedef.SpendModel", SpendModel_name, SpendModel_value)
	proto.RegisterEnum("typedef.FreqCappingInterval", FreqCappingInterval_name, FreqCappingInterval_value)
	proto.RegisterEnum("typedef.Native_NativeImageType", Native_NativeImageType_name, Native_NativeImageType_value)
}

func init() { proto.RegisterFile("campaign.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x58, 0x5f, 0x6f, 0x23, 0x49,
	0x11, 0x3f, 0x67, 0xfc, 0xb7, 0x1c, 0x3b, 0xb3, 0x93, 0xbd, 0x3b, 0x2b, 0x3a, 0xc1, 0x2a, 0x42,
	0xc7, 0x29, 0x70, 0x0b, 0x64, 0x4f, 0x9c, 0xc4, 0x13, 0x76, 0x92, 0xdd, 0x9d, 0x53, 0xe2, 0x44,
	0xed, 0xec, 0xee, 0xdd, 0x3d, 0xd1, 0xf1, 0x74, 0x9c, 0x56, 0xc6, 0x33, 0xc3, 0xcc, 0xd8, 0xd9,
	0xf0, 0xc6, 0x57, 0x40, 0x7c, 0x11, 0xde, 0xe0, 0x9d, 0x77, 0xbe, 0x00, 0x7c, 0x04, 0x04, 0x1f,
	0x81, 0xaa, 0xea, 0xf6, 0xcc, 0xd8, 0x89, 0x40, 0x42, 0x77, 0x4f, 0xee, 0xfa, 0xd5, 0xaf, 0xab,
	0xaa, 0xab, 0xab, 0xab, 0x7b, 0x0c, 0xfd, 0xa9, 0x9c, 0x27, 0x52, 0xcf, 0xa2, 0xe7, 0x49, 0x1a,
	0xe7, 0xb1, 0xd7, 0xca, 0xef, 0x13, 0x15, 0xa8, 0xeb, 0xfd, 0x7f, 0xd7, 0xa0, 0x7d, 0x64, 0x75,
	0x5e, 0x1f, 0xb6, 0x74, 0x30, 0xa8, 0x3d, 0xab, 0x7d, 0x56, 0x17, 0x38, 0xf2, 0x7e, 0x0c, 0x4d,
	0x19, 0x10, 0x73, 0xb0, 0x85, 0x58, 0xff, 0x70, 0xe7, 0xb9, 0x9d, 0xf6, 0x7c, 0x18, 0x5c, 0xe2,
	0x48, 0x58, 0xb5, 0xf7, 0x19, 0x34, 0xae, 0x64, 0xa6, 0xa7, 0x03, 0x07, 0x79, 0xdd, 0x43, 0xaf,
	0xe0, 0x91, 0xe9, 0x11, 0x69, 0x84, 0x21, 0x90, 0xc9, 0xab, 0x45, 0x30, 0x53, 0xf9, 0xa0, 0xce,
	0xd4, 0xd2, 0xe4, 0x88, 0x61, 0x61, 0xd5, 0x44, 0xcc, 0x65, 0x4a, 0xc4, 0xc6, 0x06, 0xf1, 0x92,
	0x61, 0x61, 0xd5, 0xde, 0xcf, 0xa0, 0x33, 0x4d, 0x95, 0xcc, 0xf5, 0x52, 0x65, 0x83, 0xe6, 0x33,
	0x07, 0xb9, 0x4f, 0x4a, 0xff, 0x56, 0x23, 0x4a, 0xce, 0xfe, 0xdf, 0xb7, 0xa0, 0x53, 0xc4, 0xe5,
	0x79, 0x50, 0x8f, 0xe4, 0xdc, 0xac, 0xb0, 0x23, 0x78, 0xec, 0xed, 0x41, 0x5b, 0x67, 0xc3, 0x29,
	0xd1, 0x39, 0xcc, 0xb6, 0x28, 0x64, 0xef, 0x13, 0xe8, 0xe4, 0xe9, 0xad, 0x9e, 0x27, 0x8b, 0x34,
	0xe4, 0xd0, 0x3a, 0xa2, 0x04, 0xbc, 0x1f, 0x00, 0xa0, 0x40, 0xc9, 0x26, 0x75, 0x93, 0xd5, 0x15,
	0x84, 0xf4, 0x32, 0x58, 0xe6, 0x41, 0x3c, 0x97, 0x3a, 0x1a, 0xb4, 0x8c, 0xbe, 0x44, 0xbc, 0x8f,
	0xa0, 0x99, 0xc8, 0xfb, 0x78, 0x91, 0x0f, 0xda, 0xbc, 0x0b, 0x56, 0xf2, 0x5e, 0x00, 0x98, 0xd1,
	0x59, 0x1c, 0xa8, 0x41, 0x87, 0x77, 0x63, 0xb7, 0x58, 0xe5, 0x45, 0xa1, 0x12, 0x15, 0x9a, 0x37,
	0x80, 0xd6, 0x34, 0x8e, 0x96, 0x14, 0x09, 0xb0, 0xa7, 0x95, 0xe8, 0x3d, 0x83, 0xee, 0x5c, 0xbe,
	0x1f, 0xe9, 0xe0, 0x22, 0xd5, 0x53, 0x35, 0xe8, 0xb2, 0xaf, 0x2a, 0x44, 0x81, 0x2c, 0x32, 0x95,
	0x62, 0x39, 0x6c, 0x9b, 0x40, 0x8c, 0x44, 0x33, 0x69, 0x39, 0xa1, 0x9e, 0xde, 0x92, 0xdd, 0x1e,
	0xdb, 0xad, 0x42, 0xfb, 0x7f, 0xa1, 0x8a, 0xb2, 0xc9, 0xf6, 0xbe, 0x84, 0xce, 0x95, 0x8c, 0x22,
	0x95, 0x1e, 0xa5, 0x4b, 0x2e, 0xac, 0xee, 0xe1, 0xc7, 0xe5, 0x8e, 0x5b, 0x8d, 0xe1, 0xbe, 0xfe,
	0x40, 0x94, 0x5c, 0xef, 0x0b, 0x68, 0x27, 0x71, 0xb2, 0x48, 0x68, 0xde, 0x16, 0xcf, 0xfb, 0xa8,
	0x5c, 0xae, 0x51, 0x14, 0xd3, 0x0a, 0x26, 0xb9, 0x8b, 0x18, 0xa5, 0x69, 0xce, 0x86, 0xbb, 0xb1,
	0xd5, 0x94, 0xee, 0x0a, 0xee, 0xa8, 0x01, 0xce, 0x34, 0x5d, 0xee, 0xff, 0xd3, 0x81, 0xa6, 0xa9,
	0x43, 0x2c, 0xe9, 0x9d, 0x45, 0x14, 0xea, 0xb9, 0xce, 0x55, 0x70, 0x12, 0xc9, 0xab, 0x50, 0x71,
	0xfc, 0x6d, 0xb1, 0x09, 0x73, 0x4a, 0xe2, 0x5c, 0x86, 0x66, 0x22, 0x47, 0x8b, 0xc9, 0xac, 0x40,
	0xc4, 0x08, 0xa4, 0x0e, 0xef, 0x2d, 0xc3, 0x31, 0x8c, 0x0a, 0x44, 0xde, 0x92, 0x50, 0x4e, 0xd5,
	0x5c, 0x45, 0xf9, 0xa8, 0x3c, 0x1f, 0x75, 0xb1, 0x09, 0x53, 0x05, 0x65, 0x58, 0xf9, 0xf9, 0x24,
	0xc7, 0x92, 0xe2, 0x02, 0xac, 0x8b, 0x0a, 0x42, 0xb5, 0xab, 0xa2, 0xc0, 0x68, 0x9b, 0xac, 0x2d,
	0x64, 0xef, 0xa7, 0xf0, 0xe4, 0x3a, 0x55, 0xbf, 0x3d, 0x92, 0x49, 0xa2, 0xa3, 0x99, 0x5d, 0x55,
	0x8b, 0x57, 0xf5, 0x50, 0x41, 0x51, 0x57, 0x40, 0x5b, 0x90, 0x55, 0xc8, 0x1b, 0xc3, 0x6e, 0x45,
	0xf4, 0xa3, 0x5c, 0xa5, 0x4b, 0x19, 0xda, 0xf2, 0xfc, 0xa4, 0x48, 0xfc, 0xcb, 0x87, 0x1c, 0xf1,
	0xd8, 0x44, 0xaa, 0xf2, 0x2c, 0xc1, 0x68, 0xa9, 0x7a, 0x4d, 0xcd, 0x56, 0xab, 0x7c, 0x52, 0xa8,
	0x44, 0x85, 0x46, 0x09, 0x09, 0xe4, 0xfd, 0x05, 0x26, 0x80, 0xa2, 0xec, 0x62, 0x03, 0xc0, 0x84,
	0x94, 0x08, 0x25, 0x24, 0xd7, 0x73, 0xf5, 0xbb, 0x38, 0x52, 0x5c, 0xcb, 0x1d, 0x51, 0xc8, 0xfb,
	0xff, 0x68, 0x40, 0xd3, 0xb4, 0x13, 0xea, 0x03, 0x32, 0x78, 0x9f, 0xe1, 0x26, 0x93, 0x01, 0x1e,
	0x93, 0xe9, 0xa9, 0xcc, 0xd5, 0x2c, 0x4e, 0x35, 0xf6, 0x96, 0x2d, 0xd4, 0xe0, 0x69, 0x2d, 0x11,
	0x73, 0xc0, 0x16, 0x51, 0x9e, 0xde, 0xe3, 0x9e, 0x3a, 0xe6, 0x80, 0xb1, 0x48, 0xc7, 0x27, 0x55,
	0x33, 0x1d, 0x47, 0xb8, 0x8d, 0xa4, 0xb0, 0x12, 0x79, 0x99, 0xea, 0xfc, 0x1e, 0xf7, 0x8d, 0x50,
	0x1e, 0x7b, 0x07, 0xd0, 0x0a, 0xd4, 0x92, 0xdb, 0x2c, 0xb5, 0xaf, 0xfe, 0xa1, 0x5b, 0x2c, 0xf9,
	0x58, 0x2d, 0xb9, 0xcf, 0xae, 0x08, 0xde, 0xe7, 0xd0, 0xc6, 0x33, 0x1c, 0x31, 0xb9, 0xc5, 0xf9,
	0xa9, 0xf4, 0x3a, 0x54, 0x30, 0xbb, 0xa0, 0x70, 0x80, 0x32, 0xc5, 0x58, 0x53, 0xdc, 0x3e, 0x13,
	0xa0, 0x11, 0x3d, 0x17, 0x9c, 0x38, 0x5b, 0xe2, 0x56, 0x11, 0x4a, 0x43, 0x42, 0x74, 0x92, 0x61,
	0xd6, 0x19, 0xc1, 0x21, 0x3a, 0x6b, 0xca, 0x05, 0xbb, 0xea, 0xb2, 0xab, 0x0f, 0xcb, 0xf6, 0xbf,
	0x08, 0xb4, 0x8a, 0xa6, 0xca, 0x5e, 0x02, 0x4c, 0xf2, 0x7e, 0x0e, 0xbb, 0xa9, 0x32, 0x4d, 0x19,
	0xf3, 0x3e, 0x5c, 0x9c, 0xea, 0x2c, 0xf7, 0xa9, 0x7f, 0x90, 0xc1, 0xc7, 0x54, 0xde, 0x21, 0x3c,
	0xd5, 0x99, 0xb0, 0x8a, 0xbc, 0x2c, 0xc9, 0x1e, 0x97, 0xe4, 0xa3, 0x3a, 0xef, 0x53, 0xe8, 0x2f,
	0xb5, 0xba, 0x53, 0x29, 0xd9, 0x18, 0x53, 0xe7, 0xee, 0xf3, 0xa6, 0x6e, 0xa0, 0x74, 0xa2, 0x96,
	0x3a, 0xd3, 0x79, 0x5c, 0x12, 0x77, 0x98, 0xb8, 0x09, 0xd3, 0xa9, 0xa0, 0xbe, 0xa8, 0xd2, 0xbc,
	0x62, 0xd4, 0x65, 0xee, 0x43, 0x05, 0x36, 0xa6, 0x8e, 0x46, 0x8c, 0x33, 0x3d, 0x78, 0xc2, 0x79,
	0x29, 0x3b, 0x93, 0x4f, 0x1a, 0xb4, 0x7d, 0xcf, 0x89, 0x29, 0x89, 0x74, 0x6b, 0xb0, 0xc0, 0xb6,
	0x3d, 0xce, 0x48, 0x09, 0x50, 0xac, 0x3a, 0xf3, 0x83, 0x6b, 0xf9, 0x4a, 0xea, 0xe0, 0xad, 0x0c,
	0xb1, 0xeb, 0xee, 0x9a, 0x5e, 0xb3, 0x01, 0xe3, 0x96, 0xb4, 0xb2, 0x74, 0xca, 0x7b, 0xf2, 0x74,
	0xf3, 0x78, 0xc4, 0x8b, 0xd4, 0xee, 0xc8, 0x8a, 0xb3, 0xff, 0xc7, 0x2d, 0xe8, 0xaf, 0x77, 0xd9,
	0x07, 0x77, 0xfc, 0x53, 0x68, 0xe0, 0xe5, 0x84, 0xfb, 0x64, 0xfa, 0x96, 0x11, 0xd6, 0x6e, 0x40,
	0x67, 0xe3, 0x06, 0xfc, 0x14, 0xea, 0x73, 0x3c, 0x40, 0xdc, 0xa0, 0xfa, 0x95, 0xbb, 0xde, 0x9f,
	0xcb, 0x99, 0x3a, 0x43, 0x8d, 0x60, 0x3d, 0x9d, 0x01, 0x3d, 0x9f, 0x95, 0xd7, 0xa4, 0x95, 0xc8,
	0xe3, 0x9d, 0x0e, 0xf2, 0x1b, 0xee, 0x28, 0x3d, 0x61, 0x04, 0x62, 0xdf, 0x28, 0x3d, 0xbb, 0xc9,
	0xb9, 0x7d, 0xf4, 0x84, 0x95, 0xb0, 0x46, 0x5a, 0x59, 0xa4, 0x93, 0x04, 0x3b, 0x22, 0x70, 0x43,
	0x1f, 0x3c, 0xb8, 0xdc, 0x27, 0x46, 0x2f, 0x56, 0x44, 0x3a, 0xb7, 0x7e, 0x36, 0x4c, 0xf0, 0xa9,
	0xb3, 0x54, 0x01, 0x17, 0x6f, 0x5b, 0x80, 0x2e, 0x10, 0xba, 0xa2, 0x7a, 0x6b, 0x97, 0xc8, 0x77,
	0x90, 0x15, 0x3c, 0xd9, 0x37, 0xf9, 0x3c, 0xe4, 0xac, 0xe0, 0xc9, 0xa6, 0x71, 0x35, 0xf6, 0xee,
	0xff, 0x17, 0xfb, 0xf6, 0x83, 0xd8, 0xff, 0x56, 0x83, 0xfe, 0xfa, 0x4d, 0xf6, 0x1d, 0x04, 0x8f,
	0x8f, 0x2d, 0x73, 0x17, 0x3e, 0x78, 0x95, 0x19, 0x57, 0xc2, 0xaa, 0xbf, 0x97, 0x15, 0xfd, 0xab,
	0x09, 0x4d, 0xe3, 0xc6, 0xfb, 0x09, 0x34, 0x64, 0x96, 0xa1, 0x71, 0xf3, 0x54, 0xf8, 0x70, 0x23,
	0x8c, 0xe7, 0x43, 0x52, 0x0a, 0xc3, 0xc1, 0x53, 0x53, 0x0f, 0x75, 0x74, 0x6b, 0x9f, 0x07, 0x4f,
	0x37, 0xb9, 0xa7, 0xa8, 0x13, 0xcc, 0xd8, 0xfb, 0x73, 0x0d, 0x1a, 0x3c, 0x95, 0x1c, 0xe4, 0x3a,
	0xe7, 0xbb, 0xdc, 0x79, 0xcc, 0xc1, 0x25, 0x29, 0x85, 0xe1, 0x90, 0x83, 0x40, 0xe6, 0x92, 0x1b,
	0xff, 0x23, 0x0e, 0x8e, 0x51, 0x27, 0x98, 0x41, 0x66, 0x35, 0x55, 0x3f, 0x5f, 0x03, 0x8f, 0x98,
	0xe5, 0xa3, 0x21, 0x0c, 0x87, 0xc8, 0x4b, 0x1d, 0xa8, 0x98, 0xaf, 0x86, 0x47, 0xc8, 0x6f, 0x49,
	0x29, 0x0c, 0x67, 0xef, 0x73, 0x68, 0x70, 0x4c, 0xd4, 0x9e, 0x43, 0x15, 0xd9, 0x5d, 0xa6, 0x21,
	0x55, 0x5c, 0xae, 0xde, 0xe7, 0xab, 0x97, 0x2b, 0x8d, 0xf7, 0xfe, 0x80, 0x2b, 0x65, 0x67, 0xde,
	0x36, 0xd4, 0xee, 0x98, 0xdd, 0x10, 0xb5, 0x3b, 0x92, 0x6e, 0x98, 0x88, 0xd2, 0x4d, 0x71, 0x82,
	0x9d, 0xff, 0x71, 0x82, 0xd1, 0x27, 0x1d, 0x5f, 0x53, 0xd2, 0x34, 0xc4, 0x1b, 0xba, 0xce, 0xcd,
	0xa7, 0xc1, 0x33, 0x7f, 0xb8, 0x19, 0xba, 0xf9, 0x61, 0x33, 0xdc, 0x88, 0x98, 0xbc, 0x37, 0x82,
	0x3a, 0xe5, 0x8a, 0x03, 0xa6, 0xc9, 0x14, 0x95, 0x63, 0x74, 0xab, 0x65, 0x6d, 0x95, 0xcb, 0xc2,
	0xea, 0xc5, 0xb7, 0xc0, 0xc2, 0x44, 0xd7, 0x11, 0x46, 0xd8, 0xfb, 0x3d, 0x2e, 0x8c, 0x13, 0xf3,
	0x5f, 0x17, 0x86, 0x35, 0x1e, 0x2c, 0x52, 0x0c, 0x02, 0x2f, 0x5e, 0x87, 0xc1, 0x42, 0x26, 0xef,
	0x45, 0xdb, 0xea, 0xac, 0x2f, 0xb0, 0x51, 0x2e, 0x70, 0x8f, 0x2e, 0x58, 0x6c, 0xf9, 0x6f, 0x8a,
	0xe7, 0x7b, 0x21, 0xef, 0x7d, 0x0b, 0x75, 0x2a, 0xaa, 0xd5, 0xac, 0xda, 0xda, 0xac, 0x6b, 0x19,
	0x86, 0x57, 0x72, 0x7a, 0x6b, 0xb7, 0xa3, 0x90, 0xbd, 0x1f, 0x41, 0x8f, 0xdf, 0xc6, 0x79, 0x8a,
	0x92, 0x4a, 0x33, 0xfb, 0x54, 0x58, 0x07, 0xf7, 0x6f, 0x61, 0x67, 0x23, 0x79, 0xd8, 0x11, 0x3d,
	0x55, 0xc1, 0xde, 0x44, 0xb7, 0xf1, 0x5d, 0xe4, 0x7e, 0x80, 0x09, 0x72, 0xab, 0xb8, 0x8f, 0x77,
	0x94, 0x5b, 0xdb, 0x44, 0x4f, 0xe3, 0x59, 0xec, 0x6e, 0x6d, 0xa2, 0x67, 0xf8, 0x8d, 0xe1, 0x3a,
	0xfb, 0x7f, 0xaa, 0xc1, 0xce, 0xc6, 0x71, 0xa5, 0x45, 0xc9, 0x60, 0xbe, 0x5a, 0x14, 0x0e, 0xe9,
	0xf1, 0x20, 0xed, 0x87, 0x8a, 0x79, 0xfa, 0xac, 0x44, 0xfe, 0x66, 0xa2, 0x0c, 0x38, 0xf6, 0x9b,
	0x89, 0x52, 0x80, 0x98, 0x2e, 0x8b, 0x85, 0xc7, 0xd4, 0xd3, 0xaf, 0xc3, 0xf8, 0x0e, 0x3b, 0x91,
	0x79, 0x89, 0x5a, 0x89, 0x2c, 0x07, 0x2a, 0xcb, 0x89, 0x6e, 0x3e, 0x81, 0x56, 0xa2, 0x79, 0xb0,
	0x98, 0x8f, 0xa7, 0xb6, 0xfd, 0x64, 0x31, 0xe2, 0xc1, 0x08, 0x9a, 0xe6, 0xa3, 0x13, 0x3d, 0xf5,
	0x95, 0x19, 0x62, 0x4a, 0x22, 0x93, 0x93, 0x2e, 0xb4, 0x94, 0xb9, 0xe8, 0x30, 0x15, 0x00, 0x4d,
	0xc5, 0xed, 0x1d, 0x13, 0x40, 0x0a, 0x93, 0x00, 0xd7, 0x39, 0xf8, 0x15, 0x74, 0x8a, 0x12, 0xf7,
	0x76, 0xa0, 0x8b, 0x49, 0x99, 0x95, 0x36, 0xda, 0x50, 0x57, 0x5f, 0x5d, 0xbc, 0x42, 0x03, 0x34,
	0xba, 0x18, 0xbf, 0xc2, 0xe9, 0x34, 0x7a, 0xe5, 0xbf, 0xc4, 0xb9, 0x7f, 0xad, 0x41, 0xf3, 0x7c,
	0xc2, 0x01, 0xf4, 0x01, 0xd4, 0xf9, 0x64, 0x7d, 0xa2, 0x7f, 0x3e, 0xc1, 0x89, 0xdb, 0xf8, 0xf8,
	0x1e, 0x8e, 0x8f, 0xc5, 0xb9, 0x7f, 0x6c, 0x27, 0xbf, 0xbb, 0x78, 0xed, 0x3a, 0x66, 0x74, 0x74,
	0xe2, 0xd6, 0x79, 0x24, 0xfc, 0x33, 0xb7, 0xe1, 0x75, 0xa0, 0xa1, 0x4e, 0x27, 0xa8, 0x6e, 0x32,
	0x78, 0x36, 0x3c, 0x72, 0x5b, 0x1c, 0xfa, 0xa9, 0x3f, 0x7e, 0xf3, 0xb5, 0xdb, 0x36, 0xf1, 0xbc,
	0x3d, 0x73, 0x3b, 0xec, 0x10, 0x27, 0x5d, 0x0e, 0x47, 0xa7, 0x27, 0x97, 0x2e, 0x30, 0xeb, 0xd2,
	0xff, 0xf6, 0x64, 0xec, 0x76, 0x8d, 0x69, 0x7f, 0xec, 0x6e, 0xf3, 0xe8, 0x7c, 0xf2, 0xb5, 0xdb,
	0x33, 0xd9, 0x18, 0x9d, 0x08, 0xf1, 0x8d, 0xdb, 0xe7, 0x98, 0x26, 0xdf, 0x9c, 0x8d, 0xfc, 0xe1,
	0xd8, 0xdd, 0x39, 0xf8, 0x35, 0x40, 0xf9, 0xb5, 0xc8, 0xa9, 0x34, 0x62, 0xb9, 0x9a, 0x1e, 0x74,
	0xd4, 0x51, 0x22, 0x5f, 0xea, 0xf7, 0x2a, 0xc0, 0x25, 0x51, 0x9a, 0x50, 0x3c, 0xbe, 0xc7, 0x2f,
	0x63, 0x3d, 0x75, 0xb7, 0x0e, 0xce, 0xa1, 0xb7, 0xf6, 0xcc, 0xe1, 0x1a, 0x2b, 0x90, 0xa2, 0x4a,
	0x77, 0x61, 0xa7, 0x44, 0xdf, 0xdd, 0xe0, 0xf7, 0x12, 0x1a, 0x5b, 0x03, 0x47, 0xf8, 0x65, 0x73,
	0x8b, 0x06, 0x7d, 0xd8, 0xae, 0xbe, 0x27, 0xbd, 0x27, 0xd0, 0x53, 0x2b, 0x60, 0x8c, 0xaf, 0x74,
	0x34, 0xc6, 0x5b, 0x6e, 0xa1, 0x95, 0xad, 0x2a, 0xb6, 0x32, 0xf5, 0x15, 0xb4, 0xec, 0x93, 0x99,
	0x73, 0x86, 0xe3, 0x22, 0x1e, 0x2b, 0x5f, 0xd2, 0x23, 0x32, 0xc7, 0xe9, 0x56, 0x3e, 0x8b, 0xaf,
	0x74, 0xa8, 0x70, 0xb3, 0x68, 0x9d, 0x28, 0x1f, 0xab, 0xec, 0x36, 0x8f, 0x13, 0xdc, 0x70, 0x1f,
	0x3f, 0x63, 0xed, 0x8b, 0xda, 0x24, 0x01, 0x85, 0xc2, 0x1a, 0x25, 0x95, 0x80, 0x61, 0x18, 0xae,
	0x72, 0x84, 0x52, 0x61, 0x8c, 0x73, 0x88, 0xc0, 0x3b, 0x7d, 0xad, 0xd1, 0xd4, 0x04, 0xa0, 0x7c,
	0x9d, 0x71, 0x12, 0x8c, 0xc8, 0x49, 0x8f, 0xd8, 0xa0, 0x0b, 0xdb, 0x16, 0xf4, 0x23, 0xbc, 0x19,
	0x6d, 0x80, 0x06, 0x79, 0xa7, 0xae, 0xd0, 0x66, 0x29, 0x93, 0x53, 0xe7, 0xe0, 0x4b, 0x34, 0x5a,
	0x7e, 0x05, 0x51, 0xd2, 0x58, 0x2c, 0x37, 0x92, 0x0a, 0x6c, 0x98, 0x49, 0xb2, 0x45, 0x05, 0x31,
	0x99, 0xc7, 0x71, 0x7e, 0x83, 0x49, 0xfa, 0x0d, 0xec, 0x3e, 0xf2, 0x45, 0xe6, 0x7d, 0x0c, 0xbb,
	0xaa, 0x82, 0x97, 0x76, 0xa8, 0xda, 0x5e, 0xbc, 0x46, 0xcf, 0xf6, 0x68, 0xfd, 0x92, 0xc7, 0xe6,
	0x68, 0xfd, 0xe2, 0x90, 0x05, 0x87, 0x85, 0xc3, 0x2f, 0x58, 0xa8, 0x5f, 0x35, 0xf9, 0x4f, 0xa6,
	0x17, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x45, 0x0e, 0xe5, 0x76, 0x12, 0x00, 0x00,
}
